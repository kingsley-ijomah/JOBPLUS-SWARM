name: Build Push Deploy

on:
  push:
    branches:
      - postgres

jobs:
  deploy-code:
    runs-on: ubuntu-latest
    env:
      APP_DIR_PATH: /mnt/shared_storage/jobplus-app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Shallow clone to have only the latest commit
          ref: postgres

      - name: Set up SSH Keys Access for Digital Ocean Droplet
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.MANAGER_RESERVED_IP }} >> ~/.ssh/known_hosts

      - name: Copy code to manager node on server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deployuser@${{ secrets.MANAGER_RESERVED_IP }} "\

          sudo mkdir -p $APP_DIR_PATH
          sudo chown -R deployuser:deployuser $APP_DIR_PATH

          # make the directory for postgres as root user
          # sudo mkdir -p $POSTGRES_DATA_PATH

          if [ -d $APP_DIR_PATH/.git ]; then
            git -C $APP_DIR_PATH clean -fd
            git -C $APP_DIR_PATH reset --hard HEAD
            git -C $APP_DIR_PATH pull
          else
            rm -rf $APP_DIR_PATH/*
            git clone -b postgres ${{ secrets.REPO_PAT_URL }} $APP_DIR_PATH
          fi;"

  build-and-push:
    needs: deploy-code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: postgres

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # - name: Build and Push Nginx Docker Image
      #   run: |
      #     docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-nginx:latest" -f services/nginx/Dockerfile services/nginx/
      #     docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-nginx:latest"

      - name: Build and Push Etcd Image
        run: |
          docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-etcd:latest" -f services/etcd/Dockerfile services/etcd/
          docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-etcd:latest"

      # - name: Build and Push Consul Image
      #   run: |
      #     docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-consul:latest" -f services/consul/Dockerfile services/consul/
      #     docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-consul:latest"

      # - name: Build and Push Stolon CTL Image
      #   run: |
      #     docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-stolon-ctl:latest" -f services/stolon_ctl/Dockerfile services/stolon_ctl/
      #     docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-stolon-ctl:latest"

      # - name: Build and Push Stolon Image
      #   run: |
      #     docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-stolon:latest" -f services/stolon/Dockerfile services/stolon/
      #     docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-stolon:latest"

      # - name: Build and Push Backend Image
      #   run: |
      #     docker build -t "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-backend:latest" -f services/backend/Dockerfile services/backend/
      #     docker push "${{ secrets.DOCKER_HUB_USERNAME }}/jobplus-backend:latest"

  deploy-services:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      APP_DIR_PATH: /mnt/shared_storage/jobplus-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          ref: postgres

      - name: Set up SSH Keys Access for Digital Ocean Droplet
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.MANAGER_RESERVED_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Services Stack
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no deployuser@${{ secrets.MANAGER_RESERVED_IP }} "\
          cd $APP_DIR_PATH && \
          docker stack deploy -c docker-compose.yml app_stack"
